module Lab5_3

where 

import Data.List
import System.Random
import Lecture5

-- 45 min
{-
*Lab5_3> main53
+-------+-------+-------+
| 7 6 9 | 3 4 5 | 1 8 2 |
| 5 4 3 | 2 8 1 | 7 9 6 |
| 1 2 8 | 6 7 9 | 4 5 3 |
+-------+-------+-------+
| 6 9 1 | 7 3 4 | 5 2 8 |
| 4 5 7 | 8 9 2 | 6 3 1 |
| 8 3 2 | 5 1 6 | 9 4 7 |
+-------+-------+-------+
| 9 8 6 | 4 2 7 | 3 1 5 |
| 3 1 5 | 9 6 8 | 2 7 4 |
| 2 7 4 | 1 5 3 | 8 6 9 |
+-------+-------+-------+
 
+-------+-------+-------+
| 7 6   | 3     |   8   |
| 5     |     1 | 7     |
|       |       |       |
+-------+-------+-------+
|     1 |       |       |
|       | 8   2 |       |
|   3 2 | 5     |       |
+-------+-------+-------+
|       | 4     |     5 |
|       | 9   8 |     4 |
|     4 |   5 3 |   6 9 |
+-------+-------+-------+
Is minimal
 
+-------+-------+-------+
| 6 8 5 | 2 9 3 | 4 1 7 |
| 1 2 3 | 5 7 4 | 9 8 6 |
| 9 7 4 | 1 8 6 | 3 5 2 |
+-------+-------+-------+
| 8 6 1 | 3 2 7 | 5 4 9 |
| 4 9 2 | 8 5 1 | 7 6 3 |
| 3 5 7 | 4 6 9 | 1 2 8 |
+-------+-------+-------+
| 2 3 8 | 7 4 5 | 6 9 1 |
| 5 1 6 | 9 3 8 | 2 7 4 |
| 7 4 9 | 6 1 2 | 8 3 5 |
+-------+-------+-------+
 
+-------+-------+-------+
|       |       | 4     |
|       | 5     |     6 |
|       | 1 8   | 3     |
+-------+-------+-------+
| 8     |   2 7 |       |
| 4     |     1 | 7     |
|   5   |   6   |     8 |
+-------+-------+-------+
| 2     |       |   9 1 |
|     6 |   3 8 |       |
|     9 |       |     5 |
+-------+-------+-------+
Is minimal
 
+-------+-------+-------+
| 4 3 8 | 1 7 9 | 5 2 6 |
| 2 7 1 | 5 6 8 | 4 9 3 |
| 5 6 9 | 4 2 3 | 8 1 7 |
+-------+-------+-------+
| 6 1 4 | 2 3 5 | 9 7 8 |
| 7 9 5 | 8 4 1 | 6 3 2 |
| 8 2 3 | 6 9 7 | 1 4 5 |
+-------+-------+-------+
| 3 8 6 | 9 1 2 | 7 5 4 |
| 1 4 2 | 7 5 6 | 3 8 9 |
| 9 5 7 | 3 8 4 | 2 6 1 |
+-------+-------+-------+
 
+-------+-------+-------+
|       |       |       |
|   7   | 5 6   |   9   |
| 5   9 |       |     7 |
+-------+-------+-------+
|   1   |       |     8 |
|   9   | 8 4   | 6   2 |
| 8     |   9   |   4   |
+-------+-------+-------+
| 3 8   |   1   |   5   |
| 1   2 |     6 | 3     |
|       |     4 | 2     |
+-------+-------+-------+
Is minimal
 
+-------+-------+-------+
| 9 7 1 | 5 3 2 | 4 8 6 |
| 5 3 6 | 4 9 8 | 7 1 2 |
| 2 4 8 | 1 6 7 | 9 3 5 |
+-------+-------+-------+
| 8 2 4 | 7 5 6 | 1 9 3 |
| 7 9 3 | 2 1 4 | 6 5 8 |
| 1 6 5 | 9 8 3 | 2 7 4 |
+-------+-------+-------+
| 6 8 9 | 3 4 1 | 5 2 7 |
| 3 5 2 | 6 7 9 | 8 4 1 |
| 4 1 7 | 8 2 5 | 3 6 9 |
+-------+-------+-------+
 
+-------+-------+-------+
|       |   3   |       |
|   3   |     8 |       |
| 2 4 8 |     7 |       |
+-------+-------+-------+
|       |   5   |   9   |
|   9 3 |   1 4 | 6     |
| 1     |       | 2 7   |
+-------+-------+-------+
|       | 3     | 5     |
|     2 |       |   4   |
|     7 |   2 5 | 3   9 |
+-------+-------+-------+
Is minimal
 
+-------+-------+-------+
| 8 3 7 | 2 9 4 | 1 5 6 |
| 5 6 9 | 3 1 8 | 2 4 7 |
| 1 2 4 | 7 5 6 | 3 9 8 |
+-------+-------+-------+
| 9 4 3 | 8 6 1 | 7 2 5 |
| 2 5 8 | 4 3 7 | 9 6 1 |
| 6 7 1 | 5 2 9 | 4 8 3 |
+-------+-------+-------+
| 4 1 6 | 9 8 3 | 5 7 2 |
| 3 9 2 | 6 7 5 | 8 1 4 |
| 7 8 5 | 1 4 2 | 6 3 9 |
+-------+-------+-------+
 
+-------+-------+-------+
|     7 |       |       |
|   6   |     8 | 2 4   |
|   2   | 7 5   |   9   |
+-------+-------+-------+
| 9 4   | 8     |   2   |
|       | 4 3   |   6   |
|       |   2   | 4     |
+-------+-------+-------+
|   1 6 |       |       |
|     2 |       | 8     |
|   8   |       |     9 |
+-------+-------+-------+
Is minimal
 
Passed all tests
-}

main53 :: IO ()
main53 = testIsMinimal

-- Test
testIsMinimal :: IO ()
testIsMinimal = do
              let n = 5
              cases <- genRandomProblems n
              probTester n isMinimal cases

-- Generator
genRandomProblems :: Int -> IO [(Node,Node)]
genRandomProblems n | n <= 0    = return []
                    | otherwise = do
                                    s     <- genRandomSudoku
                                    p     <- genProblem s
                                    probs <- genRandomProblems (n-1)
                                    return ((s,p):probs)

-- Property
isMinimal :: Node -> Bool
isMinimal prob = do
                  let unique  = uniqueSol prob
                  let hints   = all (\p -> (not.uniqueSol) (eraseN prob p)) (filledPositions (fst prob))
                  unique && hints

-- Test iterator
probTester :: Int -> (Node -> Bool) -> [(Node,Node)] -> IO ()
probTester n prop []        = putStrLn ("Passed all tests")
probTester n prop ((s,p):cases) = do
                                    showNode s
                                    putStrLn " "
                                    showNode p
                                    if(prop p) then do
                                      putStrLn ("Is minimal")
                                      putStrLn " "
                                      probTester (n-1) prop cases
                                    else
                                      putStrLn ("Is NOT minimal")
